import axios from "axios";
import { jwtDecode } from 'jwt-decode';

const isDevelopment = window.location.hostname === "localhost" || window.location.hostname === "127.0.0.1";

const api = axios.create({
  baseURL: isDevelopment
    ? "http://127.0.0.1:8000/api"  // Dirección local en desarrollo
    : "http://172.168.11.229:8000/api",  // Dirección IP en producción
  headers: {
    'Content-Type': 'application/json',
  },
});

const isTokenExpired = (token) => {
  if (!token) return true;
  const decodedToken = jwtDecode(token);
  const currentTime = Date.now() / 1000; // Tiempo actual en segundos
  return decodedToken.exp < currentTime; // True si el token ha expirado
};


/*api.interceptors.request.use(
  (config) => {
    const storedTokens = localStorage.getItem('tokens');
    if (storedTokens) {
      const { access } = JSON.parse(storedTokens);
      config.headers['Authorization'] = `Bearer ${access}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);*/

api.interceptors.request.use(
  (config) => {
    const storedTokens = localStorage.getItem('tokens');
    if (storedTokens) {
      const { access } = JSON.parse(storedTokens);

      // Verificar si el token ha expirado antes de cada solicitud
      if (isTokenExpired(access)) {
        // Si el token ha expirado, hacer logout
        localStorage.removeItem('tokens'); // Elimina los tokens
        window.location.href = '/login';   // Redirigir al login
        throw new Error('Token expirado, redirigiendo al login...');
      }

      // Si el token no ha expirado, añadirlo a las cabeceras
      config.headers['Authorization'] = `Bearer ${access}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Función para refrescar el token de acceso si ha expirado
/*const refreshAccessToken = async () => {
  try {
    const storedTokens = localStorage.getItem('tokens');
    if (!storedTokens) {
      throw new Error('No tokens found in localStorage');
    }

    const { refresh } = JSON.parse(storedTokens);
    
    if (!refresh) {
      throw new Error('No refresh token found');
    }

    const response = await axios.post(`${API_URL}/token/refresh/`, { refresh });

    // Actualiza el token de acceso en localStorage
    const newTokens = { access: response.data.access, refresh };
    localStorage.setItem('tokens', JSON.stringify(newTokens));

    return response.data.access;
  } catch (error) {
    console.error('Error refreshing access token:', error);
    // Si no se puede refrescar el token, redirige al login
    localStorage.removeItem('tokens');  // Elimina los tokens inválidos
    window.location.href = '/login';
    throw error;
  }
};*/

/*const refreshAccessToken = async () => {
  try {
    const storedTokens = localStorage.getItem('tokens');
    if (!storedTokens) {
      throw new Error('No tokens found in localStorage');
    }

    const { refresh } = JSON.parse(storedTokens);
    
    if (!refresh) {
      throw new Error('No refresh token found');
    }

    const response = await axios.post(`${API_URL}/token/refresh/`, { refresh });

    // Actualiza el token de acceso en localStorage
    const newTokens = { access: response.data.access, refresh };
    localStorage.setItem('tokens', JSON.stringify(newTokens));

    return response.data.access;
  } catch (error) {
    console.error('Error refreshing access token:', error);
    localStorage.removeItem('tokens'); // Elimina los tokens inválidos
    window.location.href = '/login';    // Redirige al login si no se puede refrescar
    throw error;
  }
};*/

// Interceptor de respuesta para manejar errores 401 (Unauthorized)
/*api.interceptors.response.use(
  (response) => {
    return response;
  },
  async (error) => {
    const originalRequest = error.config;

    // Si obtenemos un 401 y no hemos intentado ya refrescar el token
    if (error.response && error.response.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      try {
        const newAccessToken = await refreshAccessToken();
        originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;
        return api(originalRequest); // Reintenta la solicitud original con el nuevo token
      } catch (err) {
        console.error('Error during token refresh:', err);
        // Si falla la actualización del token, redirige al login
        window.location.href = '/login';
        return Promise.reject(error); 
      }
    }

    return Promise.reject(error);
  }
);*/

api.interceptors.response.use(
  (response) => {
    return response;
  },
  (error) => {
    if (error.response && error.response.status === 401) {
      // Si obtenemos un 401, hacemos logout
      localStorage.removeItem('tokens'); // Elimina los tokens
      window.location.href = '/login';   // Redirigir al login
    }
    return Promise.reject(error);
  }
);

// Función de login para obtener los tokens y almacenarlos
export const login = async (username, password) => {
  try {
    const response = await axios.post(`${api}/token/`, {
      username,
      password,
    });

    // Guarda los tokens en localStorage
    localStorage.setItem('access_token', response.data.access);
    localStorage.setItem('refresh_token', response.data.refresh);

    return response.data;
  } catch (error) {
    if (error.response) {
      console.error('Error response:', error.response.data);
    } else if (error.request) {
      console.error('Error request:', error.request);
    } else {
      console.error('Error', error.message);
    }
    throw error;
  }
};

export const fetchCamarasByDvr = async (dvrId) => {
  try {
    const response = await api.get(`/camaras/?dvr=${dvrId}`);
    return response.data;
  } catch (error) {
    console.error('Error fetching camaras:', error);
    throw error;
  }
};

// Función para obtener la lista de DVRs
export const fetchDvrs = async () => {
  try {
    const response = await api.get('/dvrs/');
    return response.data;
  } catch (error) {
    console.error('Error fetching DVRs:', error);
    throw error;
  }
};

// Función para crear un nuevo DVR
export const createDvr = async (dvrData) => {
  try {
    const response = await api.post('/dvrs/', dvrData);
    return response.data;
  } catch (error) {
    console.error('Error creating DVR:', error);
    throw error;
  }
};

// Función para eliminar DVR
export const deleteDvr = async (dvrId) => {
  try {
    await api.delete(`/dvrs/${dvrId}/`);
  } catch (error) {
    console.error('Error deleting DVR:', error);
    throw error;
  }
};

// Función para obtener registros
export const fetchRegistros = async () => {
  try {
    const response = await api.get('/registros/');
    return response.data;
  } catch (error) {
    console.error('Error fetching registros:', error);
    throw error;
  }
};

// Función para crear un registro
export const createRegistro = async (registroData) => {
  try {
    const response = await api.post('/registros/', registroData);
    return response.data;
  } catch (error) {
    console.error('Error creating registro:', error);
    throw error;
  }
};

// Función para obtener la lista de Cámaras
export const fetchCamaras = async () => {
  try {
    const response = await api.get('/camaras/');
    return response.data;
  } catch (error) {
    console.error('Error fetching camaras:', error);
    throw error;
  }
};

// Función para crear una nueva Cámara
export const createCamara = async (camaraData) => {
  try {
    const response = await api.post('/camaras/', camaraData);
    return response.data;
  } catch (error) {
    console.error('Error creating camara:', error);
    throw error;
  }
};

// Función para eliminar una Cámara
export const deleteCamara = async (camaraId) => {
  try {
    await api.delete(`/camaras/${camaraId}/`);
  } catch (error) {
    console.error('Error deleting camara:', error);
    throw error;
  }
};

export default api;

import React, { useState } from 'react';
import { Container, Box, Typography, TextField, Button, CssBaseline } from '@mui/material';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../AuthContext';
import fondoLogin from '../assets/Logo_login.png'; // Si ya tienes la imagen

const Login = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await login(username, password);
      navigate('/home');
    } catch (error) {
      alert('Error de autenticación. Verifica tus credenciales.');
    }
  };

  return (
    <Box
      sx={{
        minHeight: '100vh',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        background: 'linear-gradient(to bottom, #003366, #0066cc)', // Gradiente azul
        backgroundSize: 'cover',
        backgroundAttachment: 'fixed',
        position: 'relative',
      }}
    >
      <CssBaseline /> {/* Normaliza el CSS */}
      <Container component="main" maxWidth="xs" sx={{ position: 'relative', zIndex: 1 }}>
        <Box
          sx={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            p: 10, // Aumenta el padding para hacer el cuadro más grande
            borderRadius: 4,
            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.3)',
            bgcolor: 'rgba(255, 255, 255, 0.9)', // Fondo blanco semi-transparente
          }}
        >
          <Box
            component="img"
            src={fondoLogin} // Asegúrate de tener el archivo de la imagen en la ruta correcta
            alt="Fondo Login"
            sx={{
              width: '100%',
              borderRadius: '4px 4px 0 0',
              mb: 2,
            }}
          />
          <Typography variant="h4" gutterBottom sx={{ fontWeight: 'bold', color: '#003366' }}>
            BIENVENIDOS
          </Typography>
          <form onSubmit={handleSubmit} style={{ width: '100%' }}>
            <TextField
              label="Usuario"
              margin="normal"
              required
              fullWidth
              autoFocus
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              sx={{ mb: 2 }}
            />
            <TextField
              label="Contraseña"
              type="password"
              margin="normal"
              required
              fullWidth
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              sx={{ mb: 2 }}
            />
            <Button
              type="submit"
              variant="contained"
              color="primary"
              sx={{
                mt: 2,
                backgroundColor: '#003366',
                '&:hover': {
                  backgroundColor: '#001f3f',
                },
                display: 'block',
                margin: '0 auto',
              }}
            >
              Iniciar sesión
            </Button>
          </form>
        </Box>
      </Container>
    </Box>
  );
};

export default Login;

import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../AuthContext';

const ProtectedRoute = ({ children }) => {
  const { authTokens, loading } = useAuth();

  if (loading) {
    return <div>Cargando...</div>; // Puedes personalizar el mensaje de carga
  }

  // Si no hay tokens, redirige al login
  return authTokens ? children : <Navigate to="/login" />;
};

export default ProtectedRoute;

import React, { useEffect, useState } from 'react';
import { useAuth } from '../AuthContext';
import { useNavigate } from 'react-router-dom';
import { Box, Typography } from '@mui/material';
import { fetchDvrs, createDvr, deleteDvr, createRegistro } from '../services/apiService';
import ProfileSidebar from './ProfileSidebar';
import CameraTable from './CameraTable';
import Swal from 'sweetalert2';
import '../styles/CameraControlSystem.css';
import imagenBienvenida from '../assets/imagenBienvenida-removebg.png'; // Asegúrate de tener esta imagen

const Home = () => {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  // Estado para manejar los DVRs y el contenido de la tabla
  const [dvrs, setDvrs] = useState([]);
  const [showCameraControl, setShowCameraControl] = useState(false);

  // Cargar los DVRs al cargar el componente
  useEffect(() => {
    const loadData = async () => {
      try {
        const dvrsData = await fetchDvrs();
        setDvrs(dvrsData.map(dvr => ({
          ...dvr,
          diasGrabacion: '',
          verificacionAM: false,
          verificacionPM: false,
          amDisabled: false,
          pmDisabled: false,
        })));
      } catch (error) {
        console.error('Failed to load DVRs:', error);
      }
    };
    loadData();
  }, []);

  // Manejo del logout
  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  // Función para editar DVRs
  /*const handleEdit = (id, field, value) => {
    setDvrs(prevDvrs => {
      const updatedDvrs = prevDvrs.map(dvr => {
        if (dvr.id === id) {
          const updatedDvr = { ...dvr, [field]: value };

          if (field === 'fechaInicio' || field === 'fechaFinal') {
            const { fechaInicio, fechaFinal } = updatedDvr;

            if (fechaInicio && fechaFinal) {
              const startDate = new Date(fechaInicio);
              const endDate = new Date(fechaFinal);
              const daysOfRecording = Math.floor((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;

              updatedDvr.diasGrabacion = daysOfRecording > 0 ? daysOfRecording : 0;
            }
          }

          return updatedDvr;
        }
        return dvr;
      });

      return updatedDvrs;
    });
  };*/

  const handleEdit = (id, field, value) => {
    setDvrs(prevDvrs => {
      const updatedDvrs = prevDvrs.map(dvr => {
        if (dvr.id === id) {
          const updatedDvr = { ...dvr, [field]: value };
  
          if (field === 'fechaInicio' || field === 'fechaFinal') {
            const { fechaInicio, fechaFinal } = updatedDvr;
  
            if (fechaInicio && fechaFinal) {
              // Asegúrate de convertir el valor a objetos de fecha válidos
              const startDate = new Date(fechaInicio);
              const endDate = new Date(fechaFinal);
  
              // Asegúrate de que ambas fechas sean válidas
              if (!isNaN(startDate.getTime()) && !isNaN(endDate.getTime())) {
                const daysOfRecording = Math.floor((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
  
                updatedDvr.diasGrabacion = daysOfRecording > 0 ? daysOfRecording : 0;
              } else {
                updatedDvr.diasGrabacion = 0; // Si las fechas no son válidas, el número de días es 0
              }
            }
          }
  
          return updatedDvr;
        }
        return dvr;
      });
  
      return updatedDvrs;
    });
  };  

  // Manejo del registro de DVRs
  const handleRegister = async (id) => {
    const dvr = dvrs.find(dvr => dvr.id === id);

    // Verificación para que al menos una opción esté seleccionada
    if (!dvr.verificacionAM && !dvr.verificacionPM) {
      Swal.fire({
        icon: 'warning',
        title: 'Registro Incompleto',
        text: 'Debe seleccionar al menos una verificación (AM o PM) para registrar.',
      });
      return;
    }

    const registroData = {
      dvr: id,
      dias_grabacion: dvr.diasGrabacion,
      verificacion_am: dvr.verificacionAM,
      verificacion_pm: dvr.verificacionPM,
      observacion: dvr.observacion,
      fecha_inicio: dvr.fechaInicio ? new Date(dvr.fechaInicio).toISOString().split('T')[0] : null,
      fecha_final: dvr.fechaFinal ? new Date(dvr.fechaFinal).toISOString().split('T')[0] : null,
    };

    try {
      await createRegistro(registroData);
      Swal.fire({
        icon: 'success',
        title: 'Registro Exitoso',
        text: 'El registro se ha creado correctamente.',
      });

      if (dvr.verificacionAM) {
        handleEdit(id, 'amDisabled', true);
        handleEdit(id, 'verificacionAM', false);
      }

      if (dvr.verificacionPM) {
        handleEdit(id, 'pmDisabled', true);
        handleEdit(id, 'verificacionPM', false);
      }

      setDvrs(prevDvrs => [...prevDvrs]);
    } catch (error) {
      console.error('Error creando el registro:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Hubo un error al crear el registro.',
      });
    }
  };

  const handleCreateDvr = async (newDvrData) => {
    try {
      const newDvr = await createDvr(newDvrData);
      setDvrs([...dvrs, {
        ...newDvr,
        diasGrabacion: '',
        verificacionAM: false,
        verificacionPM: false,
        amDisabled: false,
        pmDisabled: false,
      }]);
    } catch (error) {
      console.error('Error creando DVR:', error);
    }
  };

  const handleDeleteDvr = async (id) => {
    try {
      await deleteDvr(id);
      setDvrs(dvrs.filter(dvr => dvr.id !== id));
    } catch (error) {
      console.error('Error eliminando DVR:', error);
    }
  };

  const toggleContentVisibility = () => {
    setShowCameraControl(true);
  };

  // Renderizado del componente
  return (
    <Box className="camera-control-system">
      <ProfileSidebar
        username={user && user.username}
        handleLogout={handleLogout}
        dvrs={dvrs}
        onCreateDvr={handleCreateDvr}
        onDeleteDvr={handleDeleteDvr}
        onShowCameraControl={toggleContentVisibility}
      />

      <Box className="camera-control-content">
        {showCameraControl ? (
          <Box className="camera-table-wrapper">
            <Typography variant="h4" gutterBottom sx={{ color: '#003366', textAlign: 'center' }}>
              Control de Cámaras
            </Typography>
            <CameraTable
              dvrs={dvrs}
              handleEdit={handleEdit}
              handleRegister={handleRegister}
            />
          </Box>
        ) : (
          <Box sx={{ textAlign: 'center', marginTop: '20px' }}>
            <Typography
              variant="h4"
              gutterBottom
              className="welcome-message"
            >
              Bienvenido al Control de Cámaras
            </Typography>

            <img
              src={imagenBienvenida}
              alt="Control de Cámaras"
              style={{ width: '400%', maxWidth: '400px', height: 'auto', marginTop: '20px', marginBottom: '20px' }}
            />
          </Box>
        )}
      </Box>
    </Box>
  );
};

export default Home;

// App.js

import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Login from './screens/Login'; // Componente de login
import Home from './components/home'; // Componente protegido
import ProtectedRoute from './routes/ProtectedRoute'; // Rutas protegidas
import { AuthProvider } from './AuthContext'; // Contexto de autenticación

const App = () => {
  return (
    <Router>
      <AuthProvider>
        <Routes>
          <Route path="/login" element={<Login />} />
          <Route path="/home" element={<ProtectedRoute><Home /></ProtectedRoute>} />
          <Route path="*" element={<Login />} /> {/* Redirige todo lo desconocido al login */}
        </Routes>
      </AuthProvider>
    </Router>
  );
};

export default App;

import React, { createContext, useState, useEffect, useContext, useCallback } from 'react';
import axios from 'axios';
import jwtDecode from 'jwt-decode';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [authTokens, setAuthTokens] = useState(() =>
    localStorage.getItem('tokens') ? JSON.parse(localStorage.getItem('tokens')) : null
  );
  const [user, setUser] = useState(() =>
    authTokens ? jwtDecode(authTokens.access) : null
  );
  const [loading, setLoading] = useState(true);

  // Función para obtener la URL base de la API según el entorno
  const getApiBaseUrl = () => {
    const hostname = window.location.hostname;
    if (hostname === 'localhost' || hostname === '127.0.0.1') {
      return 'http://localhost:8000/api';  // URL en desarrollo
    }
    return 'http://172.168.11.229:8000/api';  // URL en la red local del servidor
  };
  

  const isTokenExpired = (token) => {
    if (!token) return true;
    const decodedToken = jwtDecode(token);
    const now = Math.floor(Date.now() / 1000);
    return decodedToken.exp < now;
  };

  const logout = () => {
    setAuthTokens(null);
    setUser(null);
    localStorage.removeItem('tokens');
    window.location.href = '/login';
  };

  const checkTokenExpiration = useCallback(() => {
    if (authTokens && isTokenExpired(authTokens.access)) {
      logout();
    }
  }, [authTokens]);

  const refreshToken = async () => {
    try {
      const api = axios.create({
        baseURL: getApiBaseUrl(),
        headers: {
          'Content-Type': 'application/json',
        },
        withCredentials: true,
      });

      const response = await api.post('/token/refresh/', {
        refresh: authTokens?.refresh,
      });

      const newTokens = {
        ...authTokens,
        access: response.data.access,
      };

      localStorage.setItem('tokens', JSON.stringify(newTokens));
      setAuthTokens(newTokens);
      setUser(jwtDecode(newTokens.access));

      return newTokens;
    } catch (error) {
      console.error('Error al refrescar el token', error);
      logout();
      throw error;
    }
  };

  /*const login = async (username, password) => {
    try {
      const api = axios.create({
        baseURL: getApiBaseUrl(),
        headers: {
          'Content-Type': 'application/json',
        },
        withCredentials: true,
      });

      const response = await api.post('/token/', { username, password });
      const tokens = response.data;

      if (!tokens.access || !tokens.refresh) {
        throw new Error('Error al recibir los tokens');
      }

      const decodedUser = jwtDecode(tokens.access);

      localStorage.setItem('tokens', JSON.stringify(tokens));
      setAuthTokens(tokens);
      setUser(decodedUser);

      return tokens;
    } catch (error) {
      console.error('Error al iniciar sesión', error);
      throw error;
    }
  };*/

  const login = async (username, password) => {
    try {
      // Crear instancia de axios con configuración para CORS y la API JWT
      const api = axios.create({
        baseURL: getApiBaseUrl(),  // Obtener la URL base según el entorno
        headers: {
          'Content-Type': 'application/json',  // Tipo de contenido en JSON
        },
        withCredentials: true,  // Habilitar el envío de cookies y credenciales
      });
  
      // Enviar solicitud POST para obtener los tokens
      const response = await api.post('/token/', { username, password });
  
      // Obtener los tokens de la respuesta
      const tokens = response.data;
  
      // Verificar si se recibieron los tokens de acceso y refresh
      if (!tokens.access || !tokens.refresh) {
        throw new Error('Error al recibir los tokens');
      }
  
      // Decodificar el token de acceso para obtener información del usuario
      const decodedUser = jwtDecode(tokens.access);
  
      // Guardar los tokens en el almacenamiento local
      localStorage.setItem('tokens', JSON.stringify(tokens));
  
      // Actualizar el estado con los tokens y el usuario decodificado
      setAuthTokens(tokens);
      setUser(decodedUser);
  
      return tokens;
    } catch (error) {
      // Imprimir error en consola para depuración
      console.error('Error al iniciar sesión', error);
  
      // Personalizar el mensaje de error para el frontend (opcional)
      if (error.response && error.response.status === 401) {
        throw new Error('Credenciales incorrectas. Por favor, revisa tu nombre de usuario y contraseña.');
      } else if (error.message === 'Network Error') {
        throw new Error('Error de red. No se pudo conectar con el servidor.');
      } else {
        throw new Error('Ocurrió un error inesperado. Inténtalo de nuevo.');
      }
    }
  };  

  const axiosInstance = axios.create({
    baseURL: getApiBaseUrl(),
    headers: {
      'Content-Type': 'application/json',
    },
    withCredentials: true,
  });

  axiosInstance.interceptors.request.use(
    async (config) => {
      if (authTokens) {
        if (isTokenExpired(authTokens.access)) {
          const newTokens = await refreshToken();
          config.headers.Authorization = `Bearer ${newTokens.access}`;
        } else {
          config.headers.Authorization = `Bearer ${authTokens.access}`;
        }
      }
      return config;
    },
    (error) => {
      return Promise.reject(error);
    }
  );

  useEffect(() => {
    const interval = setInterval(() => {
      checkTokenExpiration();
    }, 60000); // Verificar cada minuto

    return () => clearInterval(interval);
  }, [checkTokenExpiration]);

  useEffect(() => {
    checkTokenExpiration();
    setLoading(false);
  }, [checkTokenExpiration]);

  return (
    <AuthContext.Provider
      value={{
        authTokens,
        user,
        login,
        logout,
        loading,
        axiosInstance,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);

export default AuthContext;

import React from 'react';
import { createRoot } from 'react-dom/client';
import AppRoutes from './routes';
import { AuthProvider } from './AuthContext'; // Contexto de autenticación

const container = document.getElementById('root');
const root = createRoot(container);

root.render(
  <AuthProvider>
    <AppRoutes />
  </AuthProvider>
);

