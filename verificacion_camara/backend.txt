from django.db import models

class Dvr(models.Model):
    nombre = models.CharField(max_length=100)
    ip = models.CharField(max_length=100)
    capacidad = models.CharField(max_length=100)
    puertos = models.IntegerField()
    ubicacion = models.CharField(max_length=250)

    def __str__(self):
        return f"{self.nombre} - {self.ubicacion}"

class RegistroGrabacion(models.Model):
    fecha = models.DateTimeField(auto_now_add=True)
    dias_grabacion = models.PositiveIntegerField()
    dvr = models.ForeignKey(Dvr, related_name='registros', on_delete=models.CASCADE)
    verificacion_am = models.BooleanField(default=False)
    verificacion_pm = models.BooleanField(default=False)
    observacion = models.TextField(blank=True)

    fecha_inicio = models.DateField(null=True, blank=True)
    fecha_final = models.DateField(null=True, blank=True)


    def __str__(self):
        return f"{self.fecha} - {self.dvr.nombre} - {self.dias_grabacion} días"


from rest_framework import serializers
from .models import Dvr, RegistroGrabacion
from django.contrib.auth.models import User
from rest_framework_simplejwt.tokens import RefreshToken
from django.utils import timezone
import pytz  # Para manejar zonas horarias
# Serializadores para manejar el registro y la autenticación de usuarios
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('username', 'email', 'password')
        extra_kwargs = {'password': {'write_only': True}}

    def create(self, validated_data):
        user = User.objects.create_user(**validated_data)
        return user

class UserSerializerWithToken(UserSerializer):
    token = serializers.SerializerMethodField()

    class Meta:
        model = User
        fields = ('username', 'email', 'password', 'token')
        extra_kwargs = {'password': {'write_only': True}}

    def get_token(self, obj):
        refresh = RefreshToken.for_user(obj)
        return str(refresh.access_token)

# Serializadores para manejar los modelos Dvr y RegistroGrabacion
class DvrSerializer(serializers.ModelSerializer):
    class Meta:
        model = Dvr
        fields = ('id', 'nombre', 'ip', 'capacidad', 'puertos', 'ubicacion')

class RegistroGrabacionSerializer(serializers.ModelSerializer):
    dvr = serializers.PrimaryKeyRelatedField(queryset=Dvr.objects.all())

    class Meta:
        model = RegistroGrabacion
        fields = ('id', 'fecha', 'dias_grabacion', 'verificacion_am', 'verificacion_pm', 'observacion', 'dvr', 'fecha_inicio', 'fecha_final')

    def validate(self, data):
        dvr = data.get('dvr')
        fecha = timezone.localtime(timezone.now()).replace(second=0, microsecond=0)
        
        # Verificar si ya existe una verificación AM para esta fecha y DVR
        if data.get('verificacion_am'):
            if RegistroGrabacion.objects.filter(dvr=dvr, fecha__date=fecha.date(), verificacion_am=True).exists():
                raise serializers.ValidationError("Ya existe una verificación AM para esta fecha y DVR.")

        # Verificar si ya existe una verificación PM para esta fecha y DVR
        if data.get('verificacion_pm'):
            if RegistroGrabacion.objects.filter(dvr=dvr, fecha__date=fecha.date(), verificacion_pm=True).exists():
                raise serializers.ValidationError("Ya existe una verificación PM para esta fecha y DVR.")

        data['fecha'] = fecha
        return data

from rest_framework import viewsets, permissions, generics
from django.contrib.auth.models import User
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
from .models import  Dvr, RegistroGrabacion
from .serializers import ( DvrSerializer, RegistroGrabacionSerializer,   UserSerializerWithToken)

# ViewSets existentes
class DvrViewSet(viewsets.ModelViewSet):
    queryset = Dvr.objects.all()
    permission_classes = [permissions.AllowAny]
    serializer_class = DvrSerializer

class RegistroGrabacionViewSet(viewsets.ModelViewSet):
    queryset = RegistroGrabacion.objects.all()
    permission_classes = [permissions.AllowAny]
    serializer_class = RegistroGrabacionSerializer

# Nuevas vistas para manejo de autenticación
class UserRegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = UserSerializerWithToken
    permission_classes = [permissions.AllowAny]

class CustomTokenObtainPairView(TokenObtainPairView):
    permission_classes = [permissions.AllowAny]

class CustomTokenRefreshView(TokenRefreshView):
    permission_classes = [permissions.AllowAny]

# aplicacion_camara/urls.py
from django.urls import include, path
from rest_framework.routers import DefaultRouter
from aplicacion_camara.api import  DvrViewSet, RegistroGrabacionViewSet, UserRegisterView, CustomTokenObtainPairView, CustomTokenRefreshView

# Crea un router para manejar automáticamente las rutas de los viewsets.
router = DefaultRouter()
router.register(r'dvrs', DvrViewSet)  # Registra el viewset para Dvr.
router.register(r'registros', RegistroGrabacionViewSet)  # Registra el viewset para RegistroGrabacion.

# Define las rutas de la aplicación incluyendo las rutas generadas por el router.
urlpatterns = [
    path('api/', include(router.urls)),
    path('register/', UserRegisterView.as_view(), name='register'),
    path('api/token/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('api/token/ref resh/', CustomTokenRefreshView.as_view(), name='token_refresh'),  # Incluye todas las rutas registradas en el router.
]

# Comentado: Ejemplo alternativo de cómo definir el router y las rutas.
""""
from rest_framework import routers
from .api import UbicacionViewSet

router = routers.DefaultRouter()

router.register('ubicaciones', UbicacionViewSet, 'ubicaciones')

urlpatterns = router.urls
"""
# aplicacion_camara/urls.py

"""
URL configuration for verificacion_camara project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
# Definición de las rutas principales del proyecto.
urlpatterns = [
    path('admin/', admin.site.urls),  # Ruta para el panel de administración de Django.
    path('', include('aplicacion_camara.urls')),  # Incluye las rutas definidas en el archivo urls.py de la aplicación 'aplicacion_camara'.
]
# verificacion_camara/urls.py

