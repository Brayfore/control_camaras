"""
URL configuration for verificacion_camara project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
# Definición de las rutas principales del proyecto.
urlpatterns = [
    path('admin/', admin.site.urls),  # Ruta para el panel de administración de Django.
    path('', include('aplicacion_camara.urls')),  # Incluye las rutas definidas en el archivo urls.py de la aplicación 'aplicacion_camara'.
]
# verificacion_camara/urls.py

from pathlib import Path
from datetime import timedelta

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'django-insecure-t95n-#=0v%qgt58z-1vde2kk&j4jwuvjb0y9aaxt_@+-e*2++@'
DEBUG = True

# Actualiza el campo ALLOWED_HOSTS con las IPs y dominios correctos
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '172.168.12.40']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'aplicacion_camara',
    'verificacion_camara',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'verificacion_camara.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'verificacion_camara.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'control_de_camaras',
        'USER': 'root',
        'PASSWORD': '',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/Bogota'
USE_I18N = True
USE_TZ = False

STATIC_URL = 'static/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuración de CORS
# settings.py

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Para desarrollo en localhost
    "http://127.0.0.1:3000",  # Otra forma de acceder localmente
    "http://172.168.11.229:3000",  # IP de tu frontend en la red local
    # Si la IP del frontend cambia, debes agregarla aquí
]

# Permitir el envío de cookies y credenciales a través de CORS
CORS_ALLOW_CREDENTIALS = True

# Métodos HTTP permitidos
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Encabezados permitidos en las solicitudes
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Si estás en desarrollo y quieres permitir todas las solicitudes
# Puedes usar esto temporalmente (pero no recomendado para producción)
CORS_ALLOW_ALL_ORIGINS = False  # Asegúrate de que esté en False para entornos de producción


REST_FRAMEWORK = {
    'DATETIME_FORMAT': "%Y-%m-%d %H:%M:%S",
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '1000/day',
        'anon': '100/day',
    },
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
}

# Configuración de SIMPLE_JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=1),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# aplicacion_camara/urls.py
from django.urls import include, path
from rest_framework.routers import DefaultRouter
from aplicacion_camara.api import DvrViewSet, RegistroGrabacionViewSet, CamaraViewSet, UserRegisterView, CustomTokenObtainPairView, CustomTokenRefreshView

# Crea un router para manejar automáticamente las rutas de los viewsets.
router = DefaultRouter()
router.register(r'dvrs', DvrViewSet)  # Registra el viewset para Dvr.
router.register(r'registros', RegistroGrabacionViewSet)  # Registra el viewset para RegistroGrabacion.
router.register(r'camaras', CamaraViewSet)  # Registra el viewset para Camaras.

# Define las rutas de la aplicación incluyendo las rutas generadas por el router.
urlpatterns = [
    path('api/', include(router.urls)),  # Incluye todas las rutas del router.
    path('api/register/', UserRegisterView.as_view(), name='register'),  # Ruta para registro de usuarios.
    path('api/token/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),  # Ruta para obtener tokens.
    path('api/token/refresh/', CustomTokenRefreshView.as_view(), name='token_refresh'),  # Ruta para refrescar tokens.
]

from rest_framework import serializers
from .models import Dvr, RegistroGrabacion, Camara  # Asegúrate de importar el modelo Camara
from django.contrib.auth.models import User
from rest_framework_simplejwt.tokens import RefreshToken
from datetime import datetime

# Serializadores para manejar el registro y la autenticación de usuarios
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('username', 'email', 'password')
        extra_kwargs = {'password': {'write_only': True}}

    def create(self, validated_data):
        user = User.objects.create_user(**validated_data)
        return user

class UserSerializerWithToken(UserSerializer):
    token = serializers.SerializerMethodField()

    class Meta:
        model = User
        fields = ('username', 'email', 'password', 'token')
        extra_kwargs = {'password': {'write_only': True}}

    def get_token(self, obj):
        refresh = RefreshToken.for_user(obj)
        return str(refresh.access_token)

# Serializador para manejar el modelo Dvr
class DvrSerializer(serializers.ModelSerializer):
    created_by = serializers.ReadOnlyField(source='created_by.username')  # Mostrar el nombre del creador

    class Meta:
        model = Dvr
        fields = ('id', 'nombre', 'ip', 'capacidad', 'puertos', 'ubicacion', 'created_by')

    def create(self, validated_data):
        request = self.context.get('request')  # Obtener la solicitud actual del contexto
        validated_data['created_by'] = request.user  # Asignar el usuario que creó el registro
        return super().create(validated_data)

# Serializador para manejar el modelo Camara
class CamaraSerializer(serializers.ModelSerializer):
    dvr_nombre = serializers.CharField(source='dvr.nombre', read_only=True)
    created_by = serializers.ReadOnlyField(source='created_by.username')  # Mostrar el nombre del creador
    
    class Meta:
        model = Camara
        fields = ['id', 'nombre', 'dvr', 'dvr_nombre', 'puerto', 'created_by']  # Asegúrate de incluir 'created_by'

    # Validación general del DVR y el puerto
    def validate(self, data):
        dvr = data.get('dvr')
        puerto = data.get('puerto')

        # Verificar que el DVR sea válido y exista en la base de datos
        if not Dvr.objects.filter(id=dvr.id).exists():
            raise serializers.ValidationError("El DVR seleccionado no es válido.")

        # Verifica si el puerto ya está en uso para el DVR seleccionado
        if Camara.objects.filter(dvr=dvr, puerto=puerto).exists():
            raise serializers.ValidationError(f"El puerto {puerto} ya está en uso para este DVR.")

        return data

    def create(self, validated_data):
        request = self.context.get('request')  # Obtener la solicitud actual del contexto
        validated_data['created_by'] = request.user  # Asignar el usuario que creó el registro
        return super().create(validated_data)

# Serializador para manejar el modelo RegistroGrabacion
class RegistroGrabacionSerializer(serializers.ModelSerializer):
    dvr = serializers.PrimaryKeyRelatedField(queryset=Dvr.objects.all())
    created_by = serializers.ReadOnlyField(source='created_by.username')  # Mostrar el nombre del creador

    class Meta:
        model = RegistroGrabacion
        fields = ('id', 'fecha', 'dias_grabacion', 'verificacion_am', 'verificacion_pm', 'observacion', 'dvr', 'fecha_inicio', 'fecha_final', 'created_by')

    def validate(self, data):
        dvr = data.get('dvr')
        fecha = datetime.now().replace(second=0, microsecond=0)  # Usamos datetime.now() para obtener la hora local

        # Verificación PM: No se puede hacer una verificación PM antes de las 12 p.m.
        if data.get('verificacion_pm') and fecha.hour < 12:
            raise serializers.ValidationError("No se puede hacer una verificación PM antes de las 12 p.m.")

        # Verificar si ya existe una verificación AM para esta fecha y DVR
        if data.get('verificacion_am'):
            if RegistroGrabacion.objects.filter(dvr=dvr, fecha__date=fecha.date(), verificacion_am=True).exists():
                raise serializers.ValidationError("Ya existe una verificación AM para esta fecha y DVR.")

        # Verificar si ya existe una verificación PM para esta fecha y DVR
        if data.get('verificacion_pm'):
            if RegistroGrabacion.objects.filter(dvr=dvr, fecha__date=fecha.date(), verificacion_pm=True).exists():
                raise serializers.ValidationError("Ya existe una verificación PM para esta fecha y DVR.")

        # Asegurarse de que al menos una verificación (AM o PM) esté presente
        if not data.get('verificacion_am') and not data.get('verificacion_pm'):
            raise serializers.ValidationError("Debe marcar al menos una verificación, ya sea AM o PM.")

        data['fecha'] = fecha  # Registrar la fecha actual
        return data

    def create(self, validated_data):
        request = self.context.get('request')  # Obtener la solicitud actual del contexto
        validated_data['created_by'] = request.user  # Asignar el usuario que creó el registro
        return super().create(validated_data)
    

from django.db import models
from django.contrib.auth.models import User  # Asegúrate de importar el modelo User

class Dvr(models.Model):
    nombre = models.CharField(max_length=100)
    ip = models.CharField(max_length=100)
    capacidad = models.CharField(max_length=100)
    puertos = models.IntegerField()
    ubicacion = models.CharField(max_length=250)
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)  # Añadimos el campo de usuario

    def __str__(self):
        return f"{self.nombre} - {self.ubicacion}"

class Camara(models.Model):
    nombre = models.CharField(max_length=100)
    dvr = models.ForeignKey(Dvr, related_name='camaras', on_delete=models.CASCADE)
    puerto = models.PositiveIntegerField()
    dvr_nombre = models.CharField(max_length=100)
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)  # Añadimos el campo de usuario

    class Meta:
        unique_together = ('dvr', 'puerto')
        
    def save(self, *args, **kwargs):
        self.dvr_nombre = self.dvr.nombre
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.nombre} - DVR: {self.dvr.nombre} - Puerto: {self.puerto}"



class RegistroGrabacion(models.Model):
    fecha = models.DateTimeField(auto_now_add=True)
    dias_grabacion = models.PositiveIntegerField()
    dvr = models.ForeignKey(Dvr, related_name='registros', on_delete=models.CASCADE)
    verificacion_am = models.BooleanField(default=False)
    verificacion_pm = models.BooleanField(default=False)
    observacion = models.TextField(blank=True)
    fecha_inicio = models.DateField(null=True, blank=True)
    fecha_final = models.DateField(null=True, blank=True)
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)  # Añadimos el campo de usuario

    def __str__(self):
        return f"{self.fecha} - {self.dvr.nombre} - {self.dias_grabacion} días"

from rest_framework import viewsets, permissions, generics, serializers  # Asegúrate de importar serializers
from rest_framework.exceptions import ValidationError  # Importar ValidationError correctamente
from django.contrib.auth.models import User
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
from .models import Dvr, RegistroGrabacion, Camara  # Importa el modelo Camara
from .serializers import DvrSerializer, RegistroGrabacionSerializer, CamaraSerializer, UserSerializerWithToken
from rest_framework.response import Response
from rest_framework import status


# ViewSets existentes
class DvrViewSet(viewsets.ModelViewSet):
    queryset = Dvr.objects.all()
    permission_classes = [permissions.IsAuthenticated]  # Solo usuarios autenticados pueden acceder
    serializer_class = DvrSerializer

    def perform_create(self, serializer):
        # Asignamos el usuario autenticado al campo created_by
        serializer.save(created_by=self.request.user)

    def perform_update(self, serializer):
        # Asignamos el usuario autenticado al campo created_by al actualizar
        serializer.save(created_by=self.request.user)


class RegistroGrabacionViewSet(viewsets.ModelViewSet):
    queryset = RegistroGrabacion.objects.all()
    permission_classes = [permissions.IsAuthenticated]  # Solo usuarios autenticados pueden acceder
    serializer_class = RegistroGrabacionSerializer

    def perform_create(self, serializer):
        # Asignamos el usuario autenticado al campo created_by
        serializer.save(created_by=self.request.user)

    def perform_update(self, serializer):
        # Asignamos el usuario autenticado al campo created_by al actualizar
        serializer.save(created_by=self.request.user)


# Vista para manejar cámaras
class CamaraViewSet(viewsets.ModelViewSet):
    queryset = Camara.objects.all()
    serializer_class = CamaraSerializer
    permission_classes = [permissions.IsAuthenticated]  # Solo usuarios autenticados pueden acceder

    def get_queryset(self):
        dvr_id = self.request.query_params.get('dvr')
        if dvr_id:
            return Camara.objects.filter(dvr_id=dvr_id)
        return super().get_queryset()

    def perform_create(self, serializer):
        try:
            # Verifica si el DVR existe
            dvr = serializer.validated_data.get('dvr')
            puerto = serializer.validated_data.get('puerto')

            if not dvr:
                raise ValidationError({"detail": "El DVR seleccionado no es válido."})

            # Verifica si el puerto ya está en uso en el DVR seleccionado
            if Camara.objects.filter(dvr=dvr, puerto=puerto).exists():
                raise ValidationError({"detail": f"El puerto {puerto} ya está en uso en este DVR."})

            # Asigna automáticamente el nombre del DVR y el usuario autenticado
            serializer.save(dvr_nombre=dvr.nombre, created_by=self.request.user)

        except ValidationError as e:
            raise e
        except Exception as e:
            print(f"Error inesperado al crear la cámara: {e}")
            raise ValidationError({"detail": "Error interno al crear la cámara."})

    def perform_update(self, serializer):
        try:
            # Asigna automáticamente el nombre del DVR y el usuario autenticado al actualizar
            serializer.save(dvr_nombre=serializer.validated_data['dvr'].nombre, created_by=self.request.user)
        except Exception as e:
            print(f"Error inesperado al actualizar la cámara: {e}")
            raise ValidationError({"detail": "Error interno al actualizar la cámara."})


# Nuevas vistas para manejo de autenticaciónclass UserRegisterView(generics.CreateAPIView):
class UserRegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = UserSerializerWithToken
    permission_classes = [permissions.AllowAny]  # Permitir que cualquiera pueda registrarse (esto es adecuado para registro de usuarios)

class CustomTokenObtainPairView(TokenObtainPairView):
    permission_classes = [permissions.AllowAny]  # Permitir que cualquier usuario con credenciales correctas obtenga un token

class CustomTokenRefreshView(TokenRefreshView):
    permission_classes = [permissions.AllowAny]  # Cualquiera con un token de actualización válido puede obtener un nuevo token de acceso




