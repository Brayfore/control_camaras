import React from 'react';
import { Box, Typography, TextField, Button, Checkbox } from '@mui/material';

const CameraForm = ({ newCamera, handleInputChange, handleCheckboxChange, handleSubmit, editId }) => (
  <Box sx={{ flex: '1', bgcolor: '#f4f4f4', p: 2, borderRadius: 2, boxShadow: 2 }}>
    <Typography variant="h6" gutterBottom>Registrar Verificación</Typography>
    <Box component="form" onSubmit={handleSubmit} sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
      <TextField
        label="Días de Grabación"
        name="diasGrabacion"
        value={newCamera.diasGrabacion || ''}
        onChange={handleInputChange}
        type="number"
        fullWidth
        sx={{ bgcolor: 'white' }}
      />
      <Box sx={{ display: 'flex', alignItems: 'center' }}>
        <Checkbox
          checked={newCamera.verificacionAM || false}
          onChange={() => handleCheckboxChange('verificacionAM')}
          sx={{ color: 'primary.main' }}
        />
        <Typography>Verificación AM</Typography>
      </Box>
      <Box sx={{ display: 'flex', alignItems: 'center' }}>
        <Checkbox
          checked={newCamera.verificacionPM || false}
          onChange={() => handleCheckboxChange('verificacionPM')}
          sx={{ color: 'primary.main' }}
        />
        <Typography>Verificación PM</Typography>
      </Box>
      <Button type="submit" variant="contained" color="primary">{editId ? 'Actualizar' : 'Registrar'}</Button>
    </Box>
  </Box>
);

export default CameraForm;

import React, { useState } from "react";
import SaveIcon from "@mui/icons-material/Save";
import {
  Box,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Checkbox,
  TextField,
  Button,
} from "@mui/material";

const CameraTable = ({ dvrs, handleEdit, handleRegister }) => {
  const [page, setPage] = useState(0);
  const rowsPerPage = 9; // Mostrar 5 DVRs por página

  const handleChangePage = (newPage) => {
    setPage(newPage);
  };

  const paginatedDvrs = dvrs.slice(
    page * rowsPerPage,
    page * rowsPerPage + rowsPerPage
  );

  return (
    <Box
      sx={{
        flexGrow: 1,
        padding: 3,
        backgroundColor: "#f0f4f7",
        borderRadius: 2,
        boxShadow: "0px 4px 12px rgba(0, 0, 0, 0.1)",
      }}
    >
      {/* Título centrado */}
      <Box
        sx={{ display: "flex", justifyContent: "center", marginBottom: "20px" }}
      >
        <Typography
          variant="h4"
          gutterBottom
          sx={{
            fontWeight: "bold",
            letterSpacing: "1.5px",
            textTransform: "uppercase",
            fontFamily: "Arial, sans-serif",
            color: "#ffffff",
            backgroundColor: "#003366",
            padding: "10px 20px",
            borderRadius: "8px",
            boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.3)",
            textAlign: "center",
            transition: "transform 0.3s ease",
            "&:hover": {
              transform: "scale(1.05)",
            },
          }}
        >
          Control de Cámaras
        </Typography>
      </Box>

      <TableContainer
        component={Paper}
        sx={{ borderRadius: "8px", overflow: "hidden" }}
      >
        <Table>
          <TableHead sx={{ backgroundColor: "#003366" }}>
            <TableRow>
              {[
                "Fecha",
                "DVR",
                "Ubicación",
                "Días de Grabación",
                "Verificación AM",
                "Verificación PM",
                "Acciones",
              ].map((header) => (
                <TableCell
                  key={header}
                  sx={{
                    color: "#ffffff",
                    textAlign: "center",
                    fontWeight: "bold",
                    padding: "12px",
                  }}
                >
                  {header}
                </TableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {paginatedDvrs.map((dvr) => (
              <TableRow
                key={dvr.id}
                sx={{
                  "&:nth-of-type(odd)": { backgroundColor: "#f9f9f9" },
                  "&:nth-of-type(even)": { backgroundColor: "#ffffff" },
                  "&:hover": { backgroundColor: "#e0e0e0" },
                  transition: "background-color 0.3s ease",
                }}
              >
                <TableCell sx={{ textAlign: "center", padding: "12px" }}>
                  {new Date().toLocaleDateString()}
                </TableCell>
                <TableCell sx={{ textAlign: "center", padding: "12px" }}>
                  {dvr.nombre}
                </TableCell>
                <TableCell sx={{ textAlign: "center", padding: "12px" }}>
                  {dvr.ubicacion}
                </TableCell>
                <TableCell sx={{ textAlign: "center", padding: "12px" }}>
                  <TextField
                    type="number"
                    name="diasGrabacion"
                    value={dvr.diasGrabacion || ""}
                    onChange={(e) =>
                      handleEdit(dvr.id, "diasGrabacion", e.target.value)
                    }
                    sx={{
                      maxWidth: "80px",
                      padding: "3px",
                      margin: "auto",
                      borderRadius: "4px",
                      "& .MuiOutlinedInput-root": {
                        "& fieldset": { borderColor: "#cccccc" },
                        "&:hover fieldset": { borderColor: "#003366" },
                      },
                    }}
                  />
                </TableCell>
                <TableCell sx={{ textAlign: "center", padding: "12px" }}>
                  <Checkbox
                    checked={dvr.verificacionAM || false}
                    onChange={(e) =>
                      handleEdit(dvr.id, "verificacionAM", e.target.checked)
                    }
                    sx={{
                      color: "#003366",
                      "&.Mui-checked": { color: "#003366" },
                    }}
                  />
                </TableCell>
                <TableCell sx={{ textAlign: "center", padding: "12px" }}>
                  <Checkbox
                    checked={dvr.verificacionPM || false}
                    onChange={(e) =>
                      handleEdit(dvr.id, "verificacionPM", e.target.checked)
                    }
                    sx={{
                      color: "#003366",
                      "&.Mui-checked": { color: "#003366" },
                    }}
                  />
                </TableCell>
                <TableCell sx={{ textAlign: "center", padding: "12px" }}>
                  <Button
                    variant="contained"
                    color="primary"
                    onClick={() => handleRegister(dvr.id)}
                    sx={{
                      backgroundColor: "#003366",
                      "&:hover": { backgroundColor: "#002244" },
                      boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.2)",
                      transition: "background-color 0.3s ease",
                      display: "flex", // Asegura que el ícono y el texto se alineen correctamente
                      alignItems: "center",
                      justifyContent: "center",
                      gap: "8px", // Añade un espacio entre el ícono y el texto
                    }}
                    startIcon={<SaveIcon />} // Añade el ícono de guardar al inicio del botón
                  >
                    Registrar
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>

        <div
          style={{
            display: "flex",
            justifyContent: "center",
            marginTop: "20px",
          }}
        >
          <Button
            onClick={() => handleChangePage(page - 1)}
            disabled={page === 0}
            sx={{
              backgroundColor: "#f0f4f7",
              "&:hover": { backgroundColor: "#003366", color: "#ffffff" },
              transition: "background-color 0.3s ease",
              boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.1)",
            }}
          >
            Anterior
          </Button>
          <Button
            onClick={() => handleChangePage(page + 1)}
            disabled={page >= Math.ceil(dvrs.length / rowsPerPage) - 1}
            sx={{
              backgroundColor: "#f0f4f7",
              "&:hover": { backgroundColor: "#003366", color: "#ffffff" },
              transition: "background-color 0.3s ease",
              boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.1)",
              marginLeft: "10px",
            }}
          >
            Siguiente
          </Button>
        </div>
      </TableContainer>
    </Box>
  );
};

export default CameraTable;

import React, { useState } from 'react';
import { Box, Modal, Typography, Button, Select, MenuItem, FormControl, InputLabel } from '@mui/material';

const DeleteDvrModal = ({ open, onClose, dvrs, handleDelete }) => {
  const [selectedDvr, setSelectedDvr] = useState('');

  const handleSelectChange = (event) => {
    setSelectedDvr(event.target.value);
  };

  const handleDeleteClick = () => {
    handleDelete(selectedDvr);
    setSelectedDvr('');  // Reiniciar el valor seleccionado después de la eliminación
    onClose(); // Cerrar el modal
  };

  return (
    <Modal open={open} onClose={onClose}>
      <Box
        sx={{
          position: 'absolute',
          top: '50%',
          left: '40%',
          transform: 'translate(-50%, -50%)',
          width: 400,
          bgcolor: 'background.paper',
          boxShadow: 24,
          p: 4,
          borderRadius: 2,
        }}
      >
        <Typography variant="h6" gutterBottom>Eliminar DVR</Typography>
        <FormControl fullWidth sx={{ mt: 2 }}>
          <InputLabel id="select-dvr-label">Seleccione un DVR</InputLabel>
          <Select
            labelId="select-dvr-label"
            value={selectedDvr}
            onChange={handleSelectChange}
            label="Seleccione un DVR"
          >
            {dvrs.map((dvr) => (
              <MenuItem key={dvr.id} value={dvr.id}>
                {dvr.nombre}
              </MenuItem>
            ))}
          </Select>
        </FormControl>

        <Button
          variant="contained"
          color="error"
          fullWidth
          onClick={handleDeleteClick}
          sx={{ mt: 2}}
          disabled={!selectedDvr}  // Desactivar botón si no hay DVR seleccionado
        >
          Eliminar DVR
        </Button>
      </Box>
    </Modal>
  );
};

export default DeleteDvrModal;

import React, { useEffect, useState } from 'react';
import { Box, Typography } from '@mui/material';
import { fetchDvrs, createDvr, deleteDvr, createRegistro } from '../services/apiService';
import ProfileSidebar from './ProfileSidebar';
import CameraTable from './CameraTable';

const CameraControlSystem = () => {
  const [dvrs, setDvrs] = useState([]);
  const [showCameraControl, setShowCameraControl] = useState(false);

  useEffect(() => {
    const loadData = async () => {
      try {
        const dvrsData = await fetchDvrs();
        setDvrs(dvrsData.map(dvr => ({
          ...dvr,
          diasGrabacion: '',
          verificacionAM: false,
          verificacionPM: false,
          amDisabled: false,
          pmDisabled: false,
        })));
      } catch (error) {
        console.error('Failed to load DVRs:', error);
      }
    };
    loadData();
  }, []);

  const handleEdit = (id, field, value) => {
    setDvrs(prevDvrs => prevDvrs.map(dvr => 
      dvr.id === id ? { ...dvr, [field]: value } : dvr
    ));
  };

  const handleRegister = async (id) => {
    const dvr = dvrs.find(dvr => dvr.id === id);
    const registroData = {
      dvr: id,
      dias_grabacion: dvr.diasGrabacion,
      verificacion_am: dvr.verificacionAM,
      verificacion_pm: dvr.verificacionPM,
    };

    try {
      await createRegistro(registroData);
      alert('Registro creado correctamente.');

      if (dvr.verificacionAM) {
        handleEdit(id, 'amDisabled', true);
        handleEdit(id, 'verificacionAM', false);  // Resetear para el siguiente día
      }

      if (dvr.verificacionPM) {
        handleEdit(id, 'pmDisabled', true);
        handleEdit(id, 'verificacionPM', false);  // Resetear para el siguiente día
      }
    } catch (error) {
      console.error('Error creating registro:', error);
      alert('Error al crear el registro.');
    }
  };

  const handleCreateDvr = async (newDvrData) => {
    try {
      const newDvr = await createDvr(newDvrData);
      setDvrs([...dvrs, {
        ...newDvr,
        diasGrabacion: '',
        verificacionAM: false,
        verificacionPM: false,
        amDisabled: false,
        pmDisabled: false,
      }]);
    } catch (error) {
      console.error('Error creating DVR:', error);
    }
  };

  const handleDeleteDvr = async (id) => {
    try {
      await deleteDvr(id);
      setDvrs(dvrs.filter(dvr => dvr.id !== id));
    } catch (error) {
      console.error('Error deleting DVR:', error);
    }
  };

  const toggleContentVisibility = () => {
    setShowCameraControl(true);
  };

  const username = localStorage.getItem('username');

  return (
    <Box sx={{ display: 'flex', height: '100vh' }}>
      <ProfileSidebar
        username={username}
        handleLogout={() => {
          localStorage.removeItem('uid');
          localStorage.removeItem('username');
          window.location.href = '/';
        }}
        dvrs={dvrs}
        onCreateDvr={handleCreateDvr}
        onDeleteDvr={handleDeleteDvr}
        onShowCameraControl={toggleContentVisibility}
      />

      <Box sx={{ flexGrow: 1, padding: 3 }}>
        {showCameraControl ? (
          <Box sx={{ width: '100%', height: '100%' }}>
            <Typography variant="h4" gutterBottom sx={{ color: '#003366', textAlign: 'center' }}>
            
            </Typography>
            <CameraTable
              dvrs={dvrs}
              handleEdit={handleEdit}
              handleRegister={handleRegister}
            />
          </Box>
        ) : (
          <Typography
          variant="h4"
          gutterBottom
          sx={{
            letterSpacing: '1.5px',
            textTransform: 'uppercase',
            fontFamily: 'Arial, sans-serif',
            color: '#ffffff', // Cambia el color del texto a blanco
            backgroundColor: '#003366', // Fondo azul oscuro
            padding: '10px 20px', // Añade espaciado interno para darle más tamaño al fondo
            borderRadius: '8px', // Bordes redondeados
            boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.3)', // Añade una sombra para darle profundidad
            textAlign: 'center', // Centra el texto
            display: 'inline-block', // Ajusta el tamaño del fondo al tamaño del texto
            transform: 'translateY(-20%)',
            transform: 'translateX(20%)', // Mueve el texto un poco hacia arriba
          }}
        >
          Bienvenido al Control de Cámaras
        </Typography>

        )}
      </Box>
    </Box>
  );
};

export default CameraControlSystem;
// CameraControlSystem.js

import React, { useState } from 'react';
import { Box, Drawer, Typography, Button, IconButton } from '@mui/material';
import { Logout as LogoutIcon, Menu as MenuIcon } from '@mui/icons-material';
import DvrCreateModal from './DvrCreateModal';
import DeleteDvrModal from './DeleteDvrModal';

const ProfileSidebar = ({ username, handleLogout, dvrs, onCreateDvr, onDeleteDvr, onShowCameraControl }) => {
  const [isDrawerOpen, setIsDrawerOpen] = useState(false);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);

  const toggleDrawer = () => {
    setIsDrawerOpen(!isDrawerOpen);
  };

  const handleOpenCreateModal = () => setIsCreateModalOpen(true);
  const handleCloseCreateModal = () => setIsCreateModalOpen(false);

  const handleOpenDeleteModal = () => setIsDeleteModalOpen(true);
  const handleCloseDeleteModal = () => setIsDeleteModalOpen(false);

  const handleControlCamarasClick = () => {
    onShowCameraControl();
    setIsDrawerOpen(false);  // Cierra el menú después de hacer clic en "Control de Cámaras"
  };

  return (
    <>
      <Drawer
        anchor="left"
        open={isDrawerOpen}
        onClose={toggleDrawer}
      >
        <Box
          sx={{
            width: 300,
            bgcolor: '#282c34',
            p: 2,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            gap: 2,
            color: 'white',
            height: '100%',
          }}
        >
          <Typography variant="h6" gutterBottom>Perfil</Typography>
          <Typography variant="body1" gutterBottom>Usuario: {username || 'No disponible'}</Typography>

          <Button variant="contained" color="error" onClick={handleLogout} startIcon={<LogoutIcon />} sx={{ mt: 2, px: 7}}>
            Cerrar sesión
          </Button>

          <Button variant="contained" color="primary" onClick={handleOpenCreateModal} sx={{ mt: 2, px: 11}}>
            Crear DVR
          </Button>

          <Button variant="contained" color="primary" onClick={handleOpenDeleteModal} sx={{ mt: 2, px: 10 }}>
            Eliminar DVR
          </Button>

          <Button variant="contained" color="primary" onClick={handleControlCamarasClick} sx={{ mt: 2, px: 6 }}>
            Control de Cámaras
          </Button>

          <DvrCreateModal
            open={isCreateModalOpen}
            onClose={handleCloseCreateModal}
            onCreate={onCreateDvr}
          />

          <DeleteDvrModal
            open={isDeleteModalOpen}
            onClose={handleCloseDeleteModal}
            dvrs={dvrs}
            handleDelete={onDeleteDvr}
          />
        </Box>
      </Drawer>

      <IconButton onClick={toggleDrawer} sx={{ position: 'fixed', top: 16, left: 16, zIndex: 1200 }}>
        <MenuIcon sx={{ color: 'blue' }} />
      </IconButton>
    </>
  );
};

export default ProfileSidebar;

